@page "/"
@inject IDataAccess _dataAccess
@using System.Security.Claims
@using ITS.CPER.WebPage.Data.Models

<style>
    body {
        background-color: #ADE8F4;
        padding: 50px;
        display: flex;
        margin: 0;
    }

    .spaceCards {
        height: 550px;
    }

    .card1 {
        background-color: #03045E;
        height: 500px;
        border-top-left-radius: 25px;
        border-bottom-left-radius: 25px;
        width: 25%;
        float: left;
    }

        .card1 .leftside {
            display: flex;
            width: 100%;
            height: 100%;
            background-color: #03045E;
            border-top-left-radius: 25px;
            border-bottom-left-radius: 25px;
            border-top-right-radius: 0px;
            border-bottom-right-radius: 0px;
            padding: 50px;
        }

            .card1 .leftside .sessionCard {
                border-radius: 25px;
                width: 100%;
                height: 100%;
            }

    /*.card .leftside .sessionCard .startEnd{

                                                                                                                                                                                        }*/

    .card2 {
        background-color: #0077B6;
        height: 500px;
        border-top-left-radius: 0px;
        border-bottom-left-radius: 0px;
        border-top-right-radius: 25px;
        border-bottom-right-radius: 25px;
        width: 75%;
        float: right;
    }

        .card2 .rightside {
            background-color: #0077B6;
            width: 100%;
            height: 100%;
            padding: 50px;
            float: right;
            border-top-left-radius: 0px;
            border-bottom-left-radius: 0px;
            border-top-right-radius: 25px;
            border-bottom-right-radius: 25px;
        }

            .card2 .rightside .distanceCard {
                margin-top: 30px;
                border-radius: 25px;
                width: 25%;
                height: 25%;
                box-shadow: 0px 5px 20px #48CAE4;
            }

            .card2 .rightside .poolsCard {
                margin-top: 20px;
                border-radius: 25px;
                width: 25%;
                height: 25%;
                box-shadow: 0px 5px 20px #48CAE4;
            }

            .card2 .rightside .heartbeatCard {
                margin-top: 20px;
                border-radius: 25px;
                width: 25%;
                height: 25%;
                box-shadow: 0px 5px 20px #48CAE4;
            }

            .card2 .rightside .chart {
                display: flex;
                margin-top: -375px;
                margin-left: 30%;
                border-radius: 25px;
                padding-left: 10px;
                padding-right: 10px;
            }

            .progressCircle{
                margin-top: 16%;
                margin-right: 53%;
                margin-left: 47%;
            }
</style>

<PageTitle>HomePage</PageTitle>
<AuthorizeView>
    <Authorized>
  
        @if (smartwatch_data != null && smartwatch_data.Count() != 0)
        {
            @if (ListOfDates.Count > 0)
            {
                <MudCarousel Class="mud-width-full" Style="height:500px; border-radius: 25px;" ShowArrows="@arrows" ShowBullets="@bullets" EnableSwipeGesture="@enableSwipeGesture" AutoCycle="@autocycle" TData="object">
                @foreach (var data in smartwatch_data)
                {
                    <MudCarouselItem Transition="Transition.Fade">
                    <div class="spaceCards">
                        <MudPaper Class="card1" Elevation="2">
                            <MudPaper Class="leftside" Elevation="0">
                                        <MudCard Class="sessionCard" Elevation="0" Style="background-color:#03045E;">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            @*<MudImage Style="width: 60%" Src="images/circlePersonSwim.jpeg" Alt="person swim" />*@
                                            <MudImage Style="width: 80%; border-radius:10px;" Src="images/sea-monkey.gif" Alt="person swim" />
                                            <div style="color: white; margin-top: 10px;">
                                                <MudText Typo="Typo.h6">Session #@(Array.IndexOf(ListOfAverageHeartbeat.Values.ToArray(), ListOfAverageHeartbeat[data.Activity_Id]) + 1)</MudText>
                                                <MudText Style="display: flex; flex-direction: row; align-items: center;">
                                                <MudIcon Icon="@Icons.Material.Filled.LocationOn" Title="Location" Style="font-size:larger;" />
                                                @if (@ListOfAddress[data.Activity_Id].Select(x => x.Country).FirstOrDefault() != null)
                                                {
                                                        @ListOfAddress[data.Activity_Id].Select(x => x.Country ).FirstOrDefault()
                                                        if (@ListOfAddress[data.Activity_Id].Select(x => x.State).FirstOrDefault() != null)
                                                        {
                                                            @(
                                                            ", " +
                                                            (ListOfAddress[data.Activity_Id].Select(x => x.State).FirstOrDefault()))
                                                        }
                                                    }
                                                </MudText>
                                            </div>
                                        </CardHeaderContent>
                                    </MudCardHeader>
                                    <MudCardContent Class="startEnd">
                                        <br />
                                        <MudText Style="color:white;">Start: @ListOfDates[data.Activity_Id].First()</MudText>
                                        <MudText Style="color:white;">End: @ListOfDates[data.Activity_Id].Last()</MudText>
                                    </MudCardContent>
                                </MudCard>
                            </MudPaper>
                        </MudPaper>
                        <MudPaper Class="card2" Elevation="2">
                            <MudPaper Class="rightside" Elevation="0">
                                <MudCard Class="distanceCard">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">Distance</MudText>
                                            <MudText>@data.Distance m</MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudIconButton Icon="@Icons.Material.Filled.CompareArrows" Style="pointer-events: none;" Color="Color.Primary" aria-label="heart rate"></MudIconButton>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                </MudCard>
                                <MudCard Class="poolsCard">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">Pool Laps</MudText>
                                            <MudText>N: @data.NumberOfPoolLaps</MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudIconButton Icon="@Icons.Material.Filled.Pool" Style="pointer-events: none;" Color="Color.Primary" aria-label="heart rate"></MudIconButton>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                </MudCard>
                                <MudCard Class="heartbeatCard">
                                    <MudCardHeader>
                                        <CardHeaderContent>
                                            <MudText Typo="Typo.h6">Avg Pulse Rate</MudText>
                                            <MudText>
                                                   @(ListOfAverageHeartbeat[data.Activity_Id].FirstOrDefault()) bpm
                                            </MudText>
                                        </CardHeaderContent>
                                        <CardHeaderActions>
                                            <MudIconButton Style="pointer-events: none;" Icon="@Icons.Material.Filled.MonitorHeart" Color="Color.Error" aria-label="heart rate"></MudIconButton>
                                        </CardHeaderActions>
                                    </MudCardHeader>
                                </MudCard>
                                <MudPaper Class="chart">
                                    <MudChart ChartType="ChartType.Line" Color="#F44336"
                                  ChartSeries="@(tmp[data.Activity_Id])"
                                  XAxisLabels="@(ListOfDates[data.Activity_Id])"
                                  Width="100%" Height="350px"></MudChart>
                                </MudPaper>
                            </MudPaper>
                        </MudPaper>
                    </div>
                }
                    </MudCarouselItem>
            }
                </MudCarousel>
            }else{
                <MudProgressCircular Class="progressCircle" Color="Color.Default" Style="height:70px; width:70px;" Indeterminate="true" />
            }

        }
        else
        {

            <div class="spaceCards">
                <MudPaper Class="card1" Elevation="2">
                    <MudPaper Class="leftside" Elevation="0">
                        <MudCard Class="sessionCard" Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">No session started</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.WaterDrop" Color="Color.Primary" Style="pointer-events: none;" aria-label="add to favorite"></MudIconButton>
                                </CardHeaderActions>
                            </MudCardHeader>
                            <MudCardContent Class="startEnd">
                                <MudText Typo="Typo.button">ID: 0000-0000-0000-0000</MudText>
                                <br />
                                <br />
                                <MudText>Start: ...</MudText>
                                <MudText>End: ...</MudText>
                            </MudCardContent>
                        </MudCard>
                    </MudPaper>
                </MudPaper>
                <MudPaper Class="card2" Elevation="2">
                    <MudPaper Class="rightside" Elevation="0">
                        <MudCard Class="distanceCard">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Distance</MudText>
                                    <MudText>0 m</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.CompareArrows" Style="pointer-events: none;" Color="Color.Primary" aria-label="heart rate"></MudIconButton>
                                </CardHeaderActions>
                            </MudCardHeader>
                        </MudCard>
                        <MudCard Class="poolsCard">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Pool Laps</MudText>
                                    <MudText>N: 0</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Icon="@Icons.Material.Filled.Pool" Style="pointer-events: none;" Color="Color.Primary" aria-label="heart rate"></MudIconButton>
                                </CardHeaderActions>
                            </MudCardHeader>
                        </MudCard>
                        <MudCard Class="heartbeatCard">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h6">Pulse Rate</MudText>
                                    <MudText>0 bpm</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton Style="pointer-events: none;" Icon="@Icons.Material.Filled.MonitorHeart" Color="Color.Error" aria-label="heart rate"></MudIconButton>
                                </CardHeaderActions>
                            </MudCardHeader>
                        </MudCard>
                        <MudPaper Class="chart">
                            @*<MudChart ChartType="ChartType.Line" Color="#F44336" ChartSeries="@Series" @bind-SelectedIndex="index" XAxisLabels="@XAxisLabels" Width="100%" Height="350px"></MudChart>*@
                        </MudPaper>
                    </MudPaper>
                </MudPaper>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@700" rel="stylesheet">
        <div style="background: #03043a; position: relative;">
            <MudImage ObjectFit="@ObjectFit.Fill" Style="max-width: 100%; max-height: 100%; object-fit: cover; opacity: 0.45;" Src="images/swim.jpg" Alt="Earth4Sport" Elevation="25" />
            <div style="position: absolute; top: 20%; left: 50%; transform: translate(-50%, -50%); text-align: center; color: #0092df; font-size: 48px; font-family: 'Kanit', sans-serif; font-weight: 700; text-shadow: 2px 2px 3px #333;">
                Swim Smarter with Earth4Sport!
            </div>
        </div>
    </NotAuthorized>

</AuthorizeView>


@code {

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }
    private bool arrows = true;
    private bool bullets = false;
    private bool enableSwipeGesture = true;
    private bool autocycle = false;
    private Transition transition = Transition.Slide;
    private List<SmartWatch_Data> smartwatch_data = new List<SmartWatch_Data>();
    private Address address = new Address();
    Dictionary<Guid, List<Double>> ListOfAverageHeartbeat = new Dictionary<Guid, List<Double>>();
    Dictionary<Guid, List<ChartSeries>> tmp = new Dictionary<Guid, List<ChartSeries>>();
    Dictionary<Guid, string[]> ListOfDates = new Dictionary<Guid, string[]>();
    Dictionary<Guid, List<Address>> ListOfAddress = new Dictionary<Guid, List<Address>>();

    ChartSeries Series =
    new ChartSeries()
        {
            Name = "Bpm",
            Data = new double[] { }//heart
        };
    string[] XAxisLabels = { };

    protected override async Task OnInitializedAsync()
    {
        Dictionary<Guid, List<ChartSeries>> xx = new Dictionary<Guid, List<ChartSeries>>();
        Dictionary<Guid, string[]> yy = new Dictionary<Guid, string[]>();
        Dictionary<Guid, List<Double>> zz = new Dictionary<Guid, List<Double>>();
        Dictionary<Guid, List<Address>> ii = new Dictionary<Guid, List<Address>>();

        User_Data _userdata = new User_Data();
        string user = (await AuthState).User.Identity.Name;

        if (user != null)
        {
            _userdata.User_Id = _dataAccess.GetUserId(user);
            smartwatch_data = await _dataAccess.GetSmartWatchDataAsync(_userdata.User_Id);
            foreach (var data in smartwatch_data)
            {
                List<double> heartBeat = new List<double>();
                List<string> Timestamp = new List<string>();
                var heartbeatData = await _dataAccess.HeartbeatQuery(data);
                for (int i = 0; i < heartbeatData.Count(); i++)
                {
                    heartBeat.Add(heartbeatData[i].Heartbeat);
                    Timestamp.Add(Convert.ToString(heartbeatData[i].Time));
                }
                double[] heart = heartBeat.ToArray();
                string[] time = Timestamp.ToArray();
                Series =
                new ChartSeries()
                    {
                        Name = "Bpm",
                        Data = heart
                    };
                XAxisLabels = time;
                xx.Add(data.Activity_Id, new() { Series });
                yy.Add(data.Activity_Id, XAxisLabels);
                zz.Add(data.Activity_Id, new() { Math.Round(heart.Average(), 0, MidpointRounding.AwayFromZero)});
                address = await address.GetAddress(data.Initial_Latitude, data.Initial_Longitude);
                ii.Add(data.Activity_Id, new() { address });
            }
            tmp = xx;
            ListOfDates = yy;
            ListOfAverageHeartbeat = zz;
            ListOfAddress = ii;
        }
    }

    string Spazio = ", ";
}
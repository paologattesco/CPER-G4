@page "/"
@using System.Security.Claims
@using ITS.CPER.InternalWebPage.Data.Models;
@using ITS.CPER.InternalWebPage.Data.Services;
@using MudBlazor;
@inject IDataAccess _dataAccess

<PageTitle>HomePage</PageTitle>

@if (smartwatch_data == null)
{
    <MudProgressCircular Class="progressCircle" Color="Color.Default" Style="height:70px; width:70px;" Indeterminate="true" />
}
else
{
    //DA METTERE UN SOLO SMARTWATCH
    <MudTable Items="@smartwatch_data" Hover="true" Breakpoint="Breakpoint.Sm">
        <ColGroup>
            <col style="width:200px;" />
            <col style="width:200px;" />
            <col />
            <col style="width:200px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh><strong>SmartWatch_Id</strong></MudTh>
            <MudTh><strong>Production_Batch</strong></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.SmartWatch_Id))">@((context.ShowSmartWatchDetails == false) ? "▼" : "▲") Details</MudButton></MudTd>
            <MudTd DataLabel="SmartWatch_Id">@context.SmartWatch_Id</MudTd>

            <MudTd DataLabel="ProdBatch">prod a caso</MudTd>

            @*SCOMMENTARE SOTTO SOLO SE SIAMO IN ITS*@
            @*<MudTd DataLabel="ProdBatch">@production_batch[context.SmartWatch_Id]</MudTd>*@
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowSmartWatchDetails)
            {
                <MudTr>
                    <td colspan="4">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">Data details for SmartWatch <strong>@context.SmartWatch_Id</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@activity_data" Context="ActivityContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                    <RowTemplate>
                                        <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPressActivities(ActivityContext.Activity_Id))">@((ActivityContext.ShowActivityDetails == false) ? "▼" : "▲") Details</MudButton></MudTd>
                                        <MudTd><strong>Activity_Id</strong></MudTd>
                                    <MudTd DataLabel="Activity_Id">@ActivityContext.Activity_Id</MudTd>
                                    </RowTemplate>
                                    <ChildRowContent>
                                    @if (ActivityContext.ShowActivityDetails)
                                    {
                                    <MudTr>
                                        <td colspan="4">
                                            <MudCard Elevation="0">
                                                <MudCardHeader>
                                                    <CardHeaderContent>
                                                            <MudText Typo="Typo.body1">Data details for Activity <strong>@ActivityContext.Activity_Id</strong></MudText>
                                                    </CardHeaderContent>
                                                </MudCardHeader>
                                                <MudCardContent Class="pa-0">
                                                        <MudTable Items="@activity_data.Where(x => x.Activity_Id.Equals(ActivityContext.Activity_Id))" Context="DetailsContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                                        <HeaderContent>
                                                            <MudTh><strong>Latitude</strong></MudTh>
                                                            <MudTh><strong>Longitude</strong></MudTh>
                                                            <MudTh><strong>Heartbeat</strong></MudTh>
                                                        </HeaderContent>
                                                        <RowTemplate>
                                                                <MudTd DataLabel="Final_Latitude">@DetailsContext.Final_Latitude</MudTd>
                                                                <MudTd DataLabel="Final_Longitude">@DetailsContext.Final_Longitude</MudTd>
                                                                <MudTd DataLabel="Heartbeat">@DetailsContext.Heartbeat</MudTd>
                                                        </RowTemplate>
                                                    </MudTable>
                                                </MudCardContent>
                                            </MudCard>
                                        </td>
                                    </MudTr>
                                    }
                                </ChildRowContent>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
                }
            </ChildRowContent>
        </MudTable>
}


@code {
    private List<SmartWatch> smartwatch_data = new List<SmartWatch>();
    private List<Activity> activity_data = new List<Activity>();
    private List<HeartBeat> heartbeat_data = new List<HeartBeat>();
    private Activity tmp = new Activity();
    private Dictionary<Guid, Guid> production_batch = new Dictionary<Guid, Guid>();

    protected override async Task OnInitializedAsync()
    {
        smartwatch_data = await _dataAccess.GetSmartWatchesDataAsync();
        //production_batch = await _dataAccess.GetProductionBatch();
        foreach (var data in smartwatch_data)
        {
            activity_data = await _dataAccess.GetActivitiesAsync(data.SmartWatch_Id);
            //data.Heartbeat = heartbeat_data.Last().Heartbeat;

            //QUERY INFLUX PER TUTTE LE ATTIVITA'
            activity_data = await _dataAccess.ActivitiesQuery(data);
            var a = 0;
        }
    }
    private void ShowBtnPress(Guid id)
    {
        SmartWatch tmpData = smartwatch_data.First(f => f.SmartWatch_Id == id);
        tmpData.ShowSmartWatchDetails = !tmpData.ShowSmartWatchDetails;
    }

    private void ShowBtnPressActivities(Guid id)
    {
        Activity tmpData = activity_data.First(f => f.Activity_Id == id);
        tmpData.ShowActivityDetails = !tmpData.ShowActivityDetails;
    }
}
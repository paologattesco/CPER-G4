@page "/"
@using System.Security.Claims
@using ITS.CPER.InternalWebPage.Data.Models;
@using ITS.CPER.InternalWebPage.Data.Services;
@using MudBlazor;
@inject IDataAccess _dataAccess

<PageTitle>HomePage</PageTitle>

@if (smartwatch_data == null || heartbeat_data.Count() == 0)
{
    <MudProgressCircular Class="progressCircle" Color="Color.Default" Style="height:70px; width:70px;" Indeterminate="true" />
}
else
{

    <MudTable Items="@smartwatch_data" Hover="true" Breakpoint="Breakpoint.Sm">
        <ColGroup>
            <col style="width:300px;" />
            <col style="width:100px;" />
            <col />
            <col style="width:100px;" />
        </ColGroup>
        <HeaderContent>
            <MudTh></MudTh>
            <MudTh>Initial Latitude</MudTh>
            <MudTh>Initial Longitude</MudTh>
            <MudTh>Final Latitude</MudTh>
            <MudTh>Final Longitude</MudTh>
            <MudTh>Heartbeat</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(() => ShowBtnPress(context.Activity_Id))">@((context.ShowDetails == true) ? "Hide" : "Show") Data Details</MudButton></MudTd>
            <MudTd DataLabel="Initial_Latitude">@context.Initial_Latitude</MudTd>
            <MudTd DataLabel="Initial_Longitude">@context.Initial_Longitude</MudTd>
            <MudTd DataLabel="Final_Latitude">@context.Final_Latitude</MudTd>
            <MudTd DataLabel="Final_Longitude">@context.Final_Longitude</MudTd>
            <MudTd DataLabel="Heartbeat">120</MudTd>
        </RowTemplate>
        <ChildRowContent>
            @if (context.ShowDetails)
            {
                <MudTr>
                    <td colspan="4">
                        <MudCard Elevation="0">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.body1">Data Details for <strong>@context.Activity_Id</strong></MudText>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent Class="pa-0">
                                <MudTable Items="@smartwatch_data.Where(x => x.Activity_Id.Equals(context.Activity_Id))" Context="SmartWatchContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                    <ColGroup>
                                        <col />
                                        <col />
                                        <col style="width:200px;" />
                                    </ColGroup>
                                    <HeaderContent>
                                        <MudTh>Activity_Id</MudTh>
                                        <MudTh>Production_Batch</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Activity_Id">@SmartWatchContext.SmartWatch_Id</MudTd>
                                        <MudTd DataLabel="ProdBatch">@production_batch[SmartWatchContext.Activity_Id]</MudTd>
                                    </RowTemplate>
                                </MudTable>
                            </MudCardContent>
                        </MudCard>
                    </td>
                </MudTr>
            }
        </ChildRowContent>
    </MudTable>
}


@code {
    private bool _loading=false;
    private List<SmartWatch_Data> smartwatch_data = new List<SmartWatch_Data>();
    private List<Heartbeat_Data> heartbeat_data = new List<Heartbeat_Data>();
    private Dictionary<Guid, Guid> production_batch = new Dictionary<Guid, Guid>();

    protected override async Task OnInitializedAsync()
    {
        smartwatch_data = await _dataAccess.GetSmartWatchesDataAsync();
        production_batch = await _dataAccess.GetProductionBatch();
        foreach (var data in smartwatch_data)
        {
            heartbeat_data = await _dataAccess.HeartbeatQuery(data);
            ShowBtnPress(data.Activity_Id);
        }
    }

    private void ShowBtnPress(Guid id)
    {
        SmartWatch_Data tmpData = smartwatch_data.First(f => f.Activity_Id == id);
        tmpData.ShowDetails = !tmpData.ShowDetails;
    }
}